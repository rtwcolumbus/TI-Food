codeunit 37002700 "Label Management"
{
    // PRw16.00.01
    // P8000698, VerticalSoft, Jack Reynolds, 09 JUL 09
    //   Modified for reports generated by Service Tier
    // 
    // PRW16.00.05
    // P8000963, Columbus IT, Jack Reynolds, 19 OCT 11
    //   Remove deletion of PDF file after call to PrintPDFFile
    // 
    // PRW16.00.06
    // P8001047, Columbus IT, Jack Reynolds, 30 MAR 12
    //   Receiving Labels
    // 
    // P8001123, Columbus IT, Jack Reynolds, 19 DEC 12
    //   Move Item table Label Code fields to Item Label table
    // 
    // PRW17.00
    // P8001141, Columbus IT, Jack Reynolds, 01 MAY 13
    //   Remove code for printing via the ADC Print Server
    // 
    // PRW18.00.03
    // P8006373, To-Increase, Jack Reynolds, 21 JAN 16
    //   Cleanup for BIS label printing
    // 
    // PRW19.00.01
    // P8007508, To-Increase, Jack Reynolds, 01 SEP 16
    //   Primary key on printer table changed to integer
    // 
    // PRW110.0
    // P8007748, To-Increase, Jack Reynolds, 08 DEC 16
    //   Utility to specify number of labels to print
    // 
    // PRW110.0.01
    // P8008451, To-Increase, Jack Reynolds, 22 MAR 17
    //   Label Printing support for NAV Anywhere
    // 
    // PRW111.00
    // P80053245, To Increase, Jack Reynolds, 23 MAR 18
    //   Upgrade for NAV 2018
    // 
    // PRW111.00.01
    // P80056709, To-Increase, Jack Reynolds, 25 JUL 18
    //   Production Containers - assign container to production order
    // 
    // PRW11300.03
    // P80082969, To Increase, Jack Reynolds, 26 SEP 19
    //   New Events

    EventSubscriberInstance = Manual;

    var
        GlobalLabelData: RecordRef;

    procedure PrintLabel(LabelCode: Code[10]; LocationCode: Code[10]; LabelRec: Variant)
    var
        Label: Record Label;
        LabelData: RecordRef;
        LabelPrinterField: FieldRef;
        LabelMethod: Interface "Label Method";
        User: Code[50];
    begin
        if not Label.GET(LabelCode) then
            exit;

        if LabelRec.ISRECORD then
            LabelData.GETTABLE(LabelRec)
        else
            LabelData := LabelRec;

        OnGetUser(User);
        if User = '' then
            User := UserId;

        if LabelData.FieldExist(5) then begin
            LabelPrinterField := LabelData.Field(5);
            LabelPrinterField.Value := GetLabelPrinter(LabelCode, LocationCode, User, LabelData);
        end;

        OnBeforePrintLabel(Label, LocationCode, LabelData);
        LabelMethod := Label.Method;
        LabelMethod.PrintLabel(Label, LabelData);
    end;

    procedure SetLabelData(LabelData: RecordRef)
    begin
        GlobalLabelData := LabelData;
    end;

    procedure GetLabelData(var LabelData: RecordRef)
    begin
        OnGetLabelData(LabelData);
    end;

    procedure GetLabelPrinter(LabelCode: Code[10]; LocationCode: Code[10]; User: Code[50]; LabelData: RecordRef): Text[100]
    var
        LabelPrinterSelection: Record "Label Printer Selection";
        LabelPrinterSelection2: Record "Label Printer Selection";
        LabelPrinterSelectionRecordRef: RecordRef;
        LabelPrinterSelectionFieldRef: FieldRef;
        Field: Record Field temporary;
        Index: Integer;
        Divisor: Integer;
    begin
        LabelPrinterSelection2."Location Code" := LocationCode;
        LabelPrinterSelection2."Label Code" := LabelCode;
        LabelPrinterSelection2."User ID" := User;
        OnTransferKeyFields(LabelPrinterSelection2, LabelData);
        LabelPrinterSelection.SetKeyFieldFilters(LabelPrinterSelection2);

        LabelPrinterSelectionRecordRef.GetTable(LabelPrinterSelection);
        for Index := 1 to LabelPrinterSelectionRecordRef.FieldCount do begin
            LabelPrinterSelectionFieldRef := LabelPrinterSelectionRecordRef.FieldIndex(Index);
            Field.ObsoleteReason := LabelPrinterSelectionFieldRef.GetFilter;
            if Field.ObsoleteReason <> '' then begin
                if LabelPrinterSelectionFieldRef.Number = LabelPrinterSelection.FieldNo("User ID") then
                    field.TableNo := 1
                else
                    field.TableNo := 0;
                Field."No." := LabelPrinterSelectionFieldRef.Number;
                Field.Insert();
            end;
        end;

        Divisor := Power(2, Field.Count);
        Field.findset;
        repeat
            Divisor := Divisor / 2;
            Field.Len := Divisor;
            Field.Modify();
        until Field.Next() = 0;

        Clear(LabelPrinterSelectionRecordRef);
        LabelPrinterSelectionRecordRef.Open(Database::"Label Printer Selection");
        for Index := (Power(2, Field.Count) - 1) downto 0 do begin
            Field.FindSet();
            repeat
                LabelPrinterSelectionFieldRef := LabelPrinterSelectionRecordRef.Field(Field."No.");
                if 1 = (Index div Field.Len) mod 2 then
                    LabelPrinterSelectionFieldRef.SetFilter(Field.ObsoleteReason)
                else
                    LabelPrinterSelectionFieldRef.SetRange();
            until Field.Next() = 0;
            if LabelPrinterSelectionRecordRef.FindFirst() then begin
                LabelPrinterSelectionRecordRef.SetTable(LabelPrinterSelection);
                exit(LabelPrinterSelection.GetPrinterName(LabelCode));
            end;
        end;
    end;

    procedure GetNoOfLables(SourceRec: Variant; DefaultNoOfLables: Integer): Integer
    var
        NoofLabelsPage: Page "No. of Labels";
    begin
        // P8007748
        NoofLabelsPage.SetData(SourceRec, DefaultNoOfLables);
        if NoofLabelsPage.RunModal = ACTION::OK then
            exit(NoofLabelsPage.GetNoOfLables);
    end;

    [EventSubscriber(ObjectType::Codeunit, Codeunit::ReportManagement, 'OnAfterGetPrinterName', '', true, false)]
    local procedure ReportManagement_OnAfterGetPrinterName(ReportID: Integer; var PrinterName: Text[250]; PrinterSelection: Record "Printer Selection")
    var
        LabField: FieldRef;
    begin
        if GlobalLabelData.FieldExist(5) then begin
            LabField := GlobalLabelData.Field(5);
            PrinterName := LabField.Value;
        end;
    end;

    [EventSubscriber(ObjectType::Codeunit, Codeunit::"Label Management", 'OnGetLabelData', '', false, false)]
    local procedure LabelManagement_OnGetLabelData(var LabelData: RecordRef)
    begin
        LabelData := GlobalLabelData;
    end;

    [IntegrationEvent(false, false)]
    local procedure OnGetUser(var User: Code[50])
    begin
    end;

    [IntegrationEvent(false, false)]
    local procedure OnTransferKeyFields(var LabelPrinterSelection: Record "Label Printer Selection"; LabelData: RecordRef)
    begin
    end;

    [IntegrationEvent(false, false)]
    local procedure OnGetLabelData(var LabelData: RecordRef)
    begin
    end;

    [IntegrationEvent(false, false)]
    local procedure OnBeforePrintLabel(Label: Record Label; LocationCode: Code[10]; LabelRec: Variant)
    begin
    end;
}